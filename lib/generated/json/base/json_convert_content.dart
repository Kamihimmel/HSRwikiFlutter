// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:hsrwikiproject/calculator/effect_entity.dart';
import 'package:hsrwikiproject/characters/character_entity.dart';
import 'package:hsrwikiproject/enemies/enemy_entity.dart';
import 'package:hsrwikiproject/lightcones/lightcone_entity.dart';
import 'package:hsrwikiproject/relics/relic_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);

class JsonConvert {
	static final Map<String, JsonConvertFunction> convertFuncMap = {
		(CharacterEntity).toString(): CharacterEntity.fromJson,
		(CharacterLeveldata).toString(): CharacterLeveldata.fromJson,
		(CharacterSkilldata).toString(): CharacterSkilldata.fromJson,
		(CharacterTracedata).toString(): CharacterTracedata.fromJson,
		(CharacterEidolon).toString(): CharacterEidolon.fromJson,
		(LightconeEntity).toString(): LightconeEntity.fromJson,
		(LightconeLeveldata).toString(): LightconeLeveldata.fromJson,
		(LightconeSkilldata).toString(): LightconeSkilldata.fromJson,
		(RelicEntity).toString(): RelicEntity.fromJson,
		(RelicSkilldata).toString(): RelicSkilldata.fromJson,
		(EffectEntity).toString(): EffectEntity.fromJson,
    (EnemyEntity).toString(): EnemyEntity.fromJson,
	};

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError('$type unimplemented');
      }
    }
  }

	//list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<CharacterEntity>[] is M){
			return data.map<CharacterEntity>((Map<String, dynamic> e) => CharacterEntity.fromJson(e)).toList() as M;
		}
		if(<CharacterLeveldata>[] is M){
			return data.map<CharacterLeveldata>((Map<String, dynamic> e) => CharacterLeveldata.fromJson(e)).toList() as M;
		}
		if(<CharacterSkilldata>[] is M){
			return data.map<CharacterSkilldata>((Map<String, dynamic> e) => CharacterSkilldata.fromJson(e)).toList() as M;
		}
		if(<CharacterTracedata>[] is M){
			return data.map<CharacterTracedata>((Map<String, dynamic> e) => CharacterTracedata.fromJson(e)).toList() as M;
		}
		if(<CharacterEidolon>[] is M){
			return data.map<CharacterEidolon>((Map<String, dynamic> e) => CharacterEidolon.fromJson(e)).toList() as M;
		}
		if(<LightconeEntity>[] is M){
			return data.map<LightconeEntity>((Map<String, dynamic> e) => LightconeEntity.fromJson(e)).toList() as M;
		}
		if(<LightconeLeveldata>[] is M){
			return data.map<LightconeLeveldata>((Map<String, dynamic> e) => LightconeLeveldata.fromJson(e)).toList() as M;
		}
		if(<LightconeSkilldata>[] is M){
			return data.map<LightconeSkilldata>((Map<String, dynamic> e) => LightconeSkilldata.fromJson(e)).toList() as M;
		}
		if(<RelicEntity>[] is M){
			return data.map<RelicEntity>((Map<String, dynamic> e) => RelicEntity.fromJson(e)).toList() as M;
		}
		if(<RelicSkilldata>[] is M){
			return data.map<RelicSkilldata>((Map<String, dynamic> e) => RelicSkilldata.fromJson(e)).toList() as M;
		}
		if(<EffectEntity>[] is M){
			return data.map<EffectEntity>((Map<String, dynamic> e) => EffectEntity.fromJson(e)).toList() as M;
		}
		if(<EnemyEntity>[] is M){
			return data.map<EnemyEntity>((Map<String, dynamic> e) => EnemyEntity.fromJson(e)).toList() as M;
		}

		debugPrint("${M.toString()} not found");
	
		return null;
	}

	static M? fromJsonAsT<M>(dynamic json) {
		if (json is M) {
			return json;
		}
		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return jsonConvert.convert<M>(json);
		}
	}
}